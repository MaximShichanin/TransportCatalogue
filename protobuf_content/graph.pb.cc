// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#include "graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto_graph {
PROTOBUF_CONSTEXPR Edge::Edge(
    ::_pbi::ConstantInitialized)
  : from_id_(0u)
  , to_id_(0u)
  , weight_(0)
  , span_count_(0u)
  , bus_id_(0u){}
struct EdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeDefaultTypeInternal() {}
  union {
    Edge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeDefaultTypeInternal _Edge_default_instance_;
PROTOBUF_CONSTEXPR Graph::Graph(
    ::_pbi::ConstantInitialized)
  : edges_()
  , vertex_count_(0u){}
struct GraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphDefaultTypeInternal() {}
  union {
    Graph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphDefaultTypeInternal _Graph_default_instance_;
}  // namespace proto_graph
static ::_pb::Metadata file_level_metadata_graph_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_graph_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_graph_2eproto = nullptr;

const uint32_t TableStruct_graph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_graph::Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_graph::Edge, from_id_),
  PROTOBUF_FIELD_OFFSET(::proto_graph::Edge, to_id_),
  PROTOBUF_FIELD_OFFSET(::proto_graph::Edge, weight_),
  PROTOBUF_FIELD_OFFSET(::proto_graph::Edge, span_count_),
  PROTOBUF_FIELD_OFFSET(::proto_graph::Edge, bus_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_graph::Graph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_graph::Graph, edges_),
  PROTOBUF_FIELD_OFFSET(::proto_graph::Graph, vertex_count_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto_graph::Edge)},
  { 11, -1, -1, sizeof(::proto_graph::Graph)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto_graph::_Edge_default_instance_._instance,
  &::proto_graph::_Graph_default_instance_._instance,
};

const char descriptor_table_protodef_graph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013graph.proto\022\013proto_graph\"Z\n\004Edge\022\017\n\007fr"
  "om_id\030\001 \001(\r\022\r\n\005to_id\030\002 \001(\r\022\016\n\006weight\030\003 \001"
  "(\001\022\022\n\nspan_count\030\004 \001(\r\022\016\n\006bus_id\030\005 \001(\r\"\?"
  "\n\005Graph\022 \n\005edges\030\001 \003(\0132\021.proto_graph.Edg"
  "e\022\024\n\014vertex_count\030\002 \001(\rb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_graph_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_graph_2eproto = {
    false, false, 191, descriptor_table_protodef_graph_2eproto,
    "graph.proto",
    &descriptor_table_graph_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_graph_2eproto::offsets,
    file_level_metadata_graph_2eproto, file_level_enum_descriptors_graph_2eproto,
    file_level_service_descriptors_graph_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_graph_2eproto_getter() {
  return &descriptor_table_graph_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_graph_2eproto(&descriptor_table_graph_2eproto);
namespace proto_graph {

// ===================================================================

class Edge::_Internal {
 public:
};

Edge::Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_graph.Edge)
}
Edge::Edge(const Edge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_id_, &from.from_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bus_id_) -
    reinterpret_cast<char*>(&from_id_)) + sizeof(bus_id_));
  // @@protoc_insertion_point(copy_constructor:proto_graph.Edge)
}

inline void Edge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bus_id_) -
    reinterpret_cast<char*>(&from_id_)) + sizeof(bus_id_));
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:proto_graph.Edge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Edge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Edge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_graph.Edge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bus_id_) -
      reinterpret_cast<char*>(&from_id_)) + sizeof(bus_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Edge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          from_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          to_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 span_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          span_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bus_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          bus_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Edge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_graph.Edge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_id = 1;
  if (this->_internal_from_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from_id(), target);
  }

  // uint32 to_id = 2;
  if (this->_internal_to_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to_id(), target);
  }

  // double weight = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight(), target);
  }

  // uint32 span_count = 4;
  if (this->_internal_span_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_span_count(), target);
  }

  // uint32 bus_id = 5;
  if (this->_internal_bus_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_bus_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_graph.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_graph.Edge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from_id = 1;
  if (this->_internal_from_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from_id());
  }

  // uint32 to_id = 2;
  if (this->_internal_to_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to_id());
  }

  // double weight = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    total_size += 1 + 8;
  }

  // uint32 span_count = 4;
  if (this->_internal_span_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_span_count());
  }

  // uint32 bus_id = 5;
  if (this->_internal_bus_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bus_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Edge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Edge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Edge::GetClassData() const { return &_class_data_; }

void Edge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Edge *>(to)->MergeFrom(
      static_cast<const Edge &>(from));
}


void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_graph.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from_id() != 0) {
    _internal_set_from_id(from._internal_from_id());
  }
  if (from._internal_to_id() != 0) {
    _internal_set_to_id(from._internal_to_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = from._internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    _internal_set_weight(from._internal_weight());
  }
  if (from._internal_span_count() != 0) {
    _internal_set_span_count(from._internal_span_count());
  }
  if (from._internal_bus_id() != 0) {
    _internal_set_bus_id(from._internal_bus_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_graph.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::InternalSwap(Edge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Edge, bus_id_)
      + sizeof(Edge::bus_id_)
      - PROTOBUF_FIELD_OFFSET(Edge, from_id_)>(
          reinterpret_cast<char*>(&from_id_),
          reinterpret_cast<char*>(&other->from_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Edge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[0]);
}

// ===================================================================

class Graph::_Internal {
 public:
};

Graph::Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  edges_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_graph.Graph)
}
Graph::Graph(const Graph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      edges_(from.edges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vertex_count_ = from.vertex_count_;
  // @@protoc_insertion_point(copy_constructor:proto_graph.Graph)
}

inline void Graph::SharedCtor() {
vertex_count_ = 0u;
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:proto_graph.Graph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Graph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Graph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_graph.Graph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edges_.Clear();
  vertex_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Graph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto_graph.Edge edges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 vertex_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          vertex_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Graph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_graph.Graph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto_graph.Edge edges = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edges_size()); i < n; i++) {
    const auto& repfield = this->_internal_edges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 vertex_count = 2;
  if (this->_internal_vertex_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vertex_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_graph.Graph)
  return target;
}

size_t Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_graph.Graph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto_graph.Edge edges = 1;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 vertex_count = 2;
  if (this->_internal_vertex_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vertex_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Graph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Graph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Graph::GetClassData() const { return &_class_data_; }

void Graph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Graph *>(to)->MergeFrom(
      static_cast<const Graph &>(from));
}


void Graph::MergeFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_graph.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  edges_.MergeFrom(from.edges_);
  if (from._internal_vertex_count() != 0) {
    _internal_set_vertex_count(from._internal_vertex_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_graph.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  return true;
}

void Graph::InternalSwap(Graph* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  edges_.InternalSwap(&other->edges_);
  swap(vertex_count_, other->vertex_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Graph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto_graph
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto_graph::Edge*
Arena::CreateMaybeMessage< ::proto_graph::Edge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_graph::Edge >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_graph::Graph*
Arena::CreateMaybeMessage< ::proto_graph::Graph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_graph::Graph >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
