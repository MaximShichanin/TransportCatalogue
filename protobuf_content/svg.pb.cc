// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svg.proto

#include "svg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto_svg {
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR RGB::RGB(
    ::_pbi::ConstantInitialized)
  : r_(0u)
  , g_(0u)
  , b_(0u){}
struct RGBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RGBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RGBDefaultTypeInternal() {}
  union {
    RGB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RGBDefaultTypeInternal _RGB_default_instance_;
PROTOBUF_CONSTEXPR RGBa::RGBa(
    ::_pbi::ConstantInitialized)
  : rgb_(nullptr)
  , opacity_(0){}
struct RGBaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RGBaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RGBaDefaultTypeInternal() {}
  union {
    RGBa _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RGBaDefaultTypeInternal _RGBa_default_instance_;
PROTOBUF_CONSTEXPR Color::Color(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct ColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorDefaultTypeInternal _Color_default_instance_;
}  // namespace proto_svg
static ::_pb::Metadata file_level_metadata_svg_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_svg_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_svg_2eproto = nullptr;

const uint32_t TableStruct_svg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_svg::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_svg::Point, x_),
  PROTOBUF_FIELD_OFFSET(::proto_svg::Point, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_svg::RGB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_svg::RGB, r_),
  PROTOBUF_FIELD_OFFSET(::proto_svg::RGB, g_),
  PROTOBUF_FIELD_OFFSET(::proto_svg::RGB, b_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_svg::RGBa, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_svg::RGBa, rgb_),
  PROTOBUF_FIELD_OFFSET(::proto_svg::RGBa, opacity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_svg::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto_svg::Color, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto_svg::Color, color__),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto_svg::Point)},
  { 8, -1, -1, sizeof(::proto_svg::RGB)},
  { 17, -1, -1, sizeof(::proto_svg::RGBa)},
  { 25, -1, -1, sizeof(::proto_svg::Color)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto_svg::_Point_default_instance_._instance,
  &::proto_svg::_RGB_default_instance_._instance,
  &::proto_svg::_RGBa_default_instance_._instance,
  &::proto_svg::_Color_default_instance_._instance,
};

const char descriptor_table_protodef_svg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tsvg.proto\022\tproto_svg\"\035\n\005Point\022\t\n\001x\030\001 \001"
  "(\001\022\t\n\001y\030\002 \001(\001\"&\n\003RGB\022\t\n\001r\030\001 \001(\r\022\t\n\001g\030\002 \001"
  "(\r\022\t\n\001b\030\003 \001(\r\"4\n\004RGBa\022\033\n\003rgb\030\001 \001(\0132\016.pro"
  "to_svg.RGB\022\017\n\007opacity\030\002 \001(\001\"a\n\005Color\022\016\n\004"
  "name\030\001 \001(\tH\000\022\035\n\003rgb\030\002 \001(\0132\016.proto_svg.RG"
  "BH\000\022\037\n\004rgba\030\003 \001(\0132\017.proto_svg.RGBaH\000B\010\n\006"
  "color_b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_svg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_svg_2eproto = {
    false, false, 254, descriptor_table_protodef_svg_2eproto,
    "svg.proto",
    &descriptor_table_svg_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_svg_2eproto::offsets,
    file_level_metadata_svg_2eproto, file_level_enum_descriptors_svg_2eproto,
    file_level_service_descriptors_svg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_svg_2eproto_getter() {
  return &descriptor_table_svg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_svg_2eproto(&descriptor_table_svg_2eproto);
namespace proto_svg {

// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_svg.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:proto_svg.Point)
}

inline void Point::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:proto_svg.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_svg.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_svg.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_svg.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_svg.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }

void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Point *>(to)->MergeFrom(
      static_cast<const Point &>(from));
}


void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_svg.Point)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_svg.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, y_)
      + sizeof(Point::y_)
      - PROTOBUF_FIELD_OFFSET(Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_svg_2eproto_getter, &descriptor_table_svg_2eproto_once,
      file_level_metadata_svg_2eproto[0]);
}

// ===================================================================

class RGB::_Internal {
 public:
};

RGB::RGB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_svg.RGB)
}
RGB::RGB(const RGB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:proto_svg.RGB)
}

inline void RGB::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&r_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_)) + sizeof(b_));
}

RGB::~RGB() {
  // @@protoc_insertion_point(destructor:proto_svg.RGB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RGB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RGB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RGB::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_svg.RGB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&r_)) + sizeof(b_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RGB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RGB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_svg.RGB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 r = 1;
  if (this->_internal_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_r(), target);
  }

  // uint32 g = 2;
  if (this->_internal_g() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_g(), target);
  }

  // uint32 b = 3;
  if (this->_internal_b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_svg.RGB)
  return target;
}

size_t RGB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_svg.RGB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 r = 1;
  if (this->_internal_r() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_r());
  }

  // uint32 g = 2;
  if (this->_internal_g() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_g());
  }

  // uint32 b = 3;
  if (this->_internal_b() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_b());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RGB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RGB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RGB::GetClassData() const { return &_class_data_; }

void RGB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RGB *>(to)->MergeFrom(
      static_cast<const RGB &>(from));
}


void RGB::MergeFrom(const RGB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_svg.RGB)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_r() != 0) {
    _internal_set_r(from._internal_r());
  }
  if (from._internal_g() != 0) {
    _internal_set_g(from._internal_g());
  }
  if (from._internal_b() != 0) {
    _internal_set_b(from._internal_b());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RGB::CopyFrom(const RGB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_svg.RGB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGB::IsInitialized() const {
  return true;
}

void RGB::InternalSwap(RGB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RGB, b_)
      + sizeof(RGB::b_)
      - PROTOBUF_FIELD_OFFSET(RGB, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RGB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_svg_2eproto_getter, &descriptor_table_svg_2eproto_once,
      file_level_metadata_svg_2eproto[1]);
}

// ===================================================================

class RGBa::_Internal {
 public:
  static const ::proto_svg::RGB& rgb(const RGBa* msg);
};

const ::proto_svg::RGB&
RGBa::_Internal::rgb(const RGBa* msg) {
  return *msg->rgb_;
}
RGBa::RGBa(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_svg.RGBa)
}
RGBa::RGBa(const RGBa& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rgb()) {
    rgb_ = new ::proto_svg::RGB(*from.rgb_);
  } else {
    rgb_ = nullptr;
  }
  opacity_ = from.opacity_;
  // @@protoc_insertion_point(copy_constructor:proto_svg.RGBa)
}

inline void RGBa::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rgb_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&opacity_) -
    reinterpret_cast<char*>(&rgb_)) + sizeof(opacity_));
}

RGBa::~RGBa() {
  // @@protoc_insertion_point(destructor:proto_svg.RGBa)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RGBa::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete rgb_;
}

void RGBa::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RGBa::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_svg.RGBa)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && rgb_ != nullptr) {
    delete rgb_;
  }
  rgb_ = nullptr;
  opacity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RGBa::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto_svg.RGB rgb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rgb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double opacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RGBa::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_svg.RGBa)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_svg.RGB rgb = 1;
  if (this->_internal_has_rgb()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rgb(this),
        _Internal::rgb(this).GetCachedSize(), target, stream);
  }

  // double opacity = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opacity = this->_internal_opacity();
  uint64_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_opacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_svg.RGBa)
  return target;
}

size_t RGBa::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_svg.RGBa)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto_svg.RGB rgb = 1;
  if (this->_internal_has_rgb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rgb_);
  }

  // double opacity = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opacity = this->_internal_opacity();
  uint64_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RGBa::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RGBa::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RGBa::GetClassData() const { return &_class_data_; }

void RGBa::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RGBa *>(to)->MergeFrom(
      static_cast<const RGBa &>(from));
}


void RGBa::MergeFrom(const RGBa& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_svg.RGBa)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rgb()) {
    _internal_mutable_rgb()->::proto_svg::RGB::MergeFrom(from._internal_rgb());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opacity = from._internal_opacity();
  uint64_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    _internal_set_opacity(from._internal_opacity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RGBa::CopyFrom(const RGBa& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_svg.RGBa)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGBa::IsInitialized() const {
  return true;
}

void RGBa::InternalSwap(RGBa* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RGBa, opacity_)
      + sizeof(RGBa::opacity_)
      - PROTOBUF_FIELD_OFFSET(RGBa, rgb_)>(
          reinterpret_cast<char*>(&rgb_),
          reinterpret_cast<char*>(&other->rgb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RGBa::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_svg_2eproto_getter, &descriptor_table_svg_2eproto_once,
      file_level_metadata_svg_2eproto[2]);
}

// ===================================================================

class Color::_Internal {
 public:
  static const ::proto_svg::RGB& rgb(const Color* msg);
  static const ::proto_svg::RGBa& rgba(const Color* msg);
};

const ::proto_svg::RGB&
Color::_Internal::rgb(const Color* msg) {
  return *msg->color__.rgb_;
}
const ::proto_svg::RGBa&
Color::_Internal::rgba(const Color* msg) {
  return *msg->color__.rgba_;
}
void Color::set_allocated_rgb(::proto_svg::RGB* rgb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_color_();
  if (rgb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rgb);
    if (message_arena != submessage_arena) {
      rgb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgb, submessage_arena);
    }
    set_has_rgb();
    color__.rgb_ = rgb;
  }
  // @@protoc_insertion_point(field_set_allocated:proto_svg.Color.rgb)
}
void Color::set_allocated_rgba(::proto_svg::RGBa* rgba) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_color_();
  if (rgba) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rgba);
    if (message_arena != submessage_arena) {
      rgba = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgba, submessage_arena);
    }
    set_has_rgba();
    color__.rgba_ = rgba;
  }
  // @@protoc_insertion_point(field_set_allocated:proto_svg.Color.rgba)
}
Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_svg.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_color_();
  switch (from.color__case()) {
    case kName: {
      _internal_set_name(from._internal_name());
      break;
    }
    case kRgb: {
      _internal_mutable_rgb()->::proto_svg::RGB::MergeFrom(from._internal_rgb());
      break;
    }
    case kRgba: {
      _internal_mutable_rgba()->::proto_svg::RGBa::MergeFrom(from._internal_rgba());
      break;
    }
    case COLOR__NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto_svg.Color)
}

inline void Color::SharedCtor() {
clear_has_color_();
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:proto_svg.Color)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_color_()) {
    clear_color_();
  }
}

void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Color::clear_color_() {
// @@protoc_insertion_point(one_of_clear_start:proto_svg.Color)
  switch (color__case()) {
    case kName: {
      color__.name_.Destroy();
      break;
    }
    case kRgb: {
      if (GetArenaForAllocation() == nullptr) {
        delete color__.rgb_;
      }
      break;
    }
    case kRgba: {
      if (GetArenaForAllocation() == nullptr) {
        delete color__.rgba_;
      }
      break;
    }
    case COLOR__NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COLOR__NOT_SET;
}


void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_svg.Color)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_color_();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_svg.Color.name"));
        } else
          goto handle_unusual;
        continue;
      // .proto_svg.RGB rgb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rgb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_svg.RGBa rgba = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rgba(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Color::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_svg.Color)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_svg.Color.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .proto_svg.RGB rgb = 2;
  if (_internal_has_rgb()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rgb(this),
        _Internal::rgb(this).GetCachedSize(), target, stream);
  }

  // .proto_svg.RGBa rgba = 3;
  if (_internal_has_rgba()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rgba(this),
        _Internal::rgba(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_svg.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_svg.Color)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (color__case()) {
    // string name = 1;
    case kName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
      break;
    }
    // .proto_svg.RGB rgb = 2;
    case kRgb: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color__.rgb_);
      break;
    }
    // .proto_svg.RGBa rgba = 3;
    case kRgba: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color__.rgba_);
      break;
    }
    case COLOR__NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Color::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Color::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Color::GetClassData() const { return &_class_data_; }

void Color::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Color *>(to)->MergeFrom(
      static_cast<const Color &>(from));
}


void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_svg.Color)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.color__case()) {
    case kName: {
      _internal_set_name(from._internal_name());
      break;
    }
    case kRgb: {
      _internal_mutable_rgb()->::proto_svg::RGB::MergeFrom(from._internal_rgb());
      break;
    }
    case kRgba: {
      _internal_mutable_rgba()->::proto_svg::RGBa::MergeFrom(from._internal_rgba());
      break;
    }
    case COLOR__NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_svg.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(color__, other->color__);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_svg_2eproto_getter, &descriptor_table_svg_2eproto_once,
      file_level_metadata_svg_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto_svg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto_svg::Point*
Arena::CreateMaybeMessage< ::proto_svg::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_svg::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_svg::RGB*
Arena::CreateMaybeMessage< ::proto_svg::RGB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_svg::RGB >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_svg::RGBa*
Arena::CreateMaybeMessage< ::proto_svg::RGBa >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_svg::RGBa >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_svg::Color*
Arena::CreateMaybeMessage< ::proto_svg::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_svg::Color >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
