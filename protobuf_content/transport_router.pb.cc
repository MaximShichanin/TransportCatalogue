// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#include "transport_router.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace transport_router_base {
PROTOBUF_CONSTEXPR TransportRouterSettings::TransportRouterSettings(
    ::_pbi::ConstantInitialized)
  : bus_wait_time_(0)
  , bus_velocity_(0){}
struct TransportRouterSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransportRouterSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransportRouterSettingsDefaultTypeInternal() {}
  union {
    TransportRouterSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransportRouterSettingsDefaultTypeInternal _TransportRouterSettings_default_instance_;
PROTOBUF_CONSTEXPR TransportRouter::TransportRouter(
    ::_pbi::ConstantInitialized)
  : settings_(nullptr)
  , graph_(nullptr){}
struct TransportRouterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransportRouterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransportRouterDefaultTypeInternal() {}
  union {
    TransportRouter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransportRouterDefaultTypeInternal _TransportRouter_default_instance_;
}  // namespace transport_router_base
static ::_pb::Metadata file_level_metadata_transport_5frouter_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_transport_5frouter_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_transport_5frouter_2eproto = nullptr;

const uint32_t TableStruct_transport_5frouter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_router_base::TransportRouterSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_router_base::TransportRouterSettings, bus_wait_time_),
  PROTOBUF_FIELD_OFFSET(::transport_router_base::TransportRouterSettings, bus_velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_router_base::TransportRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_router_base::TransportRouter, settings_),
  PROTOBUF_FIELD_OFFSET(::transport_router_base::TransportRouter, graph_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::transport_router_base::TransportRouterSettings)},
  { 8, -1, -1, sizeof(::transport_router_base::TransportRouter)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::transport_router_base::_TransportRouterSettings_default_instance_._instance,
  &::transport_router_base::_TransportRouter_default_instance_._instance,
};

const char descriptor_table_protodef_transport_5frouter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026transport_router.proto\022\025transport_rout"
  "er_base\032\013graph.proto\"F\n\027TransportRouterS"
  "ettings\022\025\n\rbus_wait_time\030\001 \001(\001\022\024\n\014bus_ve"
  "locity\030\002 \001(\001\"v\n\017TransportRouter\022@\n\010setti"
  "ngs\030\001 \001(\0132..transport_router_base.Transp"
  "ortRouterSettings\022!\n\005graph\030\002 \001(\0132\022.proto"
  "_graph.Graphb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_transport_5frouter_2eproto_deps[1] = {
  &::descriptor_table_graph_2eproto,
};
static ::_pbi::once_flag descriptor_table_transport_5frouter_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transport_5frouter_2eproto = {
    false, false, 260, descriptor_table_protodef_transport_5frouter_2eproto,
    "transport_router.proto",
    &descriptor_table_transport_5frouter_2eproto_once, descriptor_table_transport_5frouter_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_transport_5frouter_2eproto::offsets,
    file_level_metadata_transport_5frouter_2eproto, file_level_enum_descriptors_transport_5frouter_2eproto,
    file_level_service_descriptors_transport_5frouter_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transport_5frouter_2eproto_getter() {
  return &descriptor_table_transport_5frouter_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transport_5frouter_2eproto(&descriptor_table_transport_5frouter_2eproto);
namespace transport_router_base {

// ===================================================================

class TransportRouterSettings::_Internal {
 public:
};

TransportRouterSettings::TransportRouterSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:transport_router_base.TransportRouterSettings)
}
TransportRouterSettings::TransportRouterSettings(const TransportRouterSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bus_wait_time_, &from.bus_wait_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&bus_velocity_) -
    reinterpret_cast<char*>(&bus_wait_time_)) + sizeof(bus_velocity_));
  // @@protoc_insertion_point(copy_constructor:transport_router_base.TransportRouterSettings)
}

inline void TransportRouterSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bus_wait_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bus_velocity_) -
    reinterpret_cast<char*>(&bus_wait_time_)) + sizeof(bus_velocity_));
}

TransportRouterSettings::~TransportRouterSettings() {
  // @@protoc_insertion_point(destructor:transport_router_base.TransportRouterSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransportRouterSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransportRouterSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransportRouterSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_router_base.TransportRouterSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bus_wait_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bus_velocity_) -
      reinterpret_cast<char*>(&bus_wait_time_)) + sizeof(bus_velocity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportRouterSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double bus_wait_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          bus_wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double bus_velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          bus_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransportRouterSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_router_base.TransportRouterSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double bus_wait_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_wait_time = this->_internal_bus_wait_time();
  uint64_t raw_bus_wait_time;
  memcpy(&raw_bus_wait_time, &tmp_bus_wait_time, sizeof(tmp_bus_wait_time));
  if (raw_bus_wait_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_bus_wait_time(), target);
  }

  // double bus_velocity = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = this->_internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_bus_velocity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_router_base.TransportRouterSettings)
  return target;
}

size_t TransportRouterSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_router_base.TransportRouterSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double bus_wait_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_wait_time = this->_internal_bus_wait_time();
  uint64_t raw_bus_wait_time;
  memcpy(&raw_bus_wait_time, &tmp_bus_wait_time, sizeof(tmp_bus_wait_time));
  if (raw_bus_wait_time != 0) {
    total_size += 1 + 8;
  }

  // double bus_velocity = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = this->_internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransportRouterSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransportRouterSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransportRouterSettings::GetClassData() const { return &_class_data_; }

void TransportRouterSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransportRouterSettings *>(to)->MergeFrom(
      static_cast<const TransportRouterSettings &>(from));
}


void TransportRouterSettings::MergeFrom(const TransportRouterSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_router_base.TransportRouterSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_wait_time = from._internal_bus_wait_time();
  uint64_t raw_bus_wait_time;
  memcpy(&raw_bus_wait_time, &tmp_bus_wait_time, sizeof(tmp_bus_wait_time));
  if (raw_bus_wait_time != 0) {
    _internal_set_bus_wait_time(from._internal_bus_wait_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = from._internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    _internal_set_bus_velocity(from._internal_bus_velocity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransportRouterSettings::CopyFrom(const TransportRouterSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_router_base.TransportRouterSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRouterSettings::IsInitialized() const {
  return true;
}

void TransportRouterSettings::InternalSwap(TransportRouterSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportRouterSettings, bus_velocity_)
      + sizeof(TransportRouterSettings::bus_velocity_)
      - PROTOBUF_FIELD_OFFSET(TransportRouterSettings, bus_wait_time_)>(
          reinterpret_cast<char*>(&bus_wait_time_),
          reinterpret_cast<char*>(&other->bus_wait_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportRouterSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[0]);
}

// ===================================================================

class TransportRouter::_Internal {
 public:
  static const ::transport_router_base::TransportRouterSettings& settings(const TransportRouter* msg);
  static const ::proto_graph::Graph& graph(const TransportRouter* msg);
};

const ::transport_router_base::TransportRouterSettings&
TransportRouter::_Internal::settings(const TransportRouter* msg) {
  return *msg->settings_;
}
const ::proto_graph::Graph&
TransportRouter::_Internal::graph(const TransportRouter* msg) {
  return *msg->graph_;
}
void TransportRouter::clear_graph() {
  if (GetArenaForAllocation() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
}
TransportRouter::TransportRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:transport_router_base.TransportRouter)
}
TransportRouter::TransportRouter(const TransportRouter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_settings()) {
    settings_ = new ::transport_router_base::TransportRouterSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from._internal_has_graph()) {
    graph_ = new ::proto_graph::Graph(*from.graph_);
  } else {
    graph_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:transport_router_base.TransportRouter)
}

inline void TransportRouter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&graph_) -
    reinterpret_cast<char*>(&settings_)) + sizeof(graph_));
}

TransportRouter::~TransportRouter() {
  // @@protoc_insertion_point(destructor:transport_router_base.TransportRouter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransportRouter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete graph_;
}

void TransportRouter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransportRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_router_base.TransportRouter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  if (GetArenaForAllocation() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportRouter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .transport_router_base.TransportRouterSettings settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_graph.Graph graph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransportRouter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_router_base.TransportRouter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .transport_router_base.TransportRouterSettings settings = 1;
  if (this->_internal_has_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::settings(this),
        _Internal::settings(this).GetCachedSize(), target, stream);
  }

  // .proto_graph.Graph graph = 2;
  if (this->_internal_has_graph()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::graph(this),
        _Internal::graph(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_router_base.TransportRouter)
  return target;
}

size_t TransportRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_router_base.TransportRouter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .transport_router_base.TransportRouterSettings settings = 1;
  if (this->_internal_has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  // .proto_graph.Graph graph = 2;
  if (this->_internal_has_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransportRouter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransportRouter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransportRouter::GetClassData() const { return &_class_data_; }

void TransportRouter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransportRouter *>(to)->MergeFrom(
      static_cast<const TransportRouter &>(from));
}


void TransportRouter::MergeFrom(const TransportRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_router_base.TransportRouter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_settings()) {
    _internal_mutable_settings()->::transport_router_base::TransportRouterSettings::MergeFrom(from._internal_settings());
  }
  if (from._internal_has_graph()) {
    _internal_mutable_graph()->::proto_graph::Graph::MergeFrom(from._internal_graph());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransportRouter::CopyFrom(const TransportRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_router_base.TransportRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRouter::IsInitialized() const {
  return true;
}

void TransportRouter::InternalSwap(TransportRouter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportRouter, graph_)
      + sizeof(TransportRouter::graph_)
      - PROTOBUF_FIELD_OFFSET(TransportRouter, settings_)>(
          reinterpret_cast<char*>(&settings_),
          reinterpret_cast<char*>(&other->settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportRouter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace transport_router_base
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::transport_router_base::TransportRouterSettings*
Arena::CreateMaybeMessage< ::transport_router_base::TransportRouterSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_router_base::TransportRouterSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_router_base::TransportRouter*
Arena::CreateMaybeMessage< ::transport_router_base::TransportRouter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_router_base::TransportRouter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
