// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "map_renderer.pb.h"
#include "transport_router.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace transport_base {
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class Coordinates;
struct CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class Stop_DistanceToOtherStopsEntry_DoNotUse;
struct Stop_DistanceToOtherStopsEntry_DoNotUseDefaultTypeInternal;
extern Stop_DistanceToOtherStopsEntry_DoNotUseDefaultTypeInternal _Stop_DistanceToOtherStopsEntry_DoNotUse_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace transport_base
PROTOBUF_NAMESPACE_OPEN
template<> ::transport_base::Bus* Arena::CreateMaybeMessage<::transport_base::Bus>(Arena*);
template<> ::transport_base::Coordinates* Arena::CreateMaybeMessage<::transport_base::Coordinates>(Arena*);
template<> ::transport_base::Stop* Arena::CreateMaybeMessage<::transport_base::Stop>(Arena*);
template<> ::transport_base::Stop_DistanceToOtherStopsEntry_DoNotUse* Arena::CreateMaybeMessage<::transport_base::Stop_DistanceToOtherStopsEntry_DoNotUse>(Arena*);
template<> ::transport_base::TransportCatalogue* Arena::CreateMaybeMessage<::transport_base::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace transport_base {

enum Bus_ROUTE_TYPE : int {
  Bus_ROUTE_TYPE_LINEAR = 0,
  Bus_ROUTE_TYPE_CIRCLE = 1,
  Bus_ROUTE_TYPE_Bus_ROUTE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Bus_ROUTE_TYPE_Bus_ROUTE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Bus_ROUTE_TYPE_IsValid(int value);
constexpr Bus_ROUTE_TYPE Bus_ROUTE_TYPE_ROUTE_TYPE_MIN = Bus_ROUTE_TYPE_LINEAR;
constexpr Bus_ROUTE_TYPE Bus_ROUTE_TYPE_ROUTE_TYPE_MAX = Bus_ROUTE_TYPE_CIRCLE;
constexpr int Bus_ROUTE_TYPE_ROUTE_TYPE_ARRAYSIZE = Bus_ROUTE_TYPE_ROUTE_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bus_ROUTE_TYPE_descriptor();
template<typename T>
inline const std::string& Bus_ROUTE_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bus_ROUTE_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bus_ROUTE_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bus_ROUTE_TYPE_descriptor(), enum_t_value);
}
inline bool Bus_ROUTE_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bus_ROUTE_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bus_ROUTE_TYPE>(
    Bus_ROUTE_TYPE_descriptor(), name, value);
}
// ===================================================================

class Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_base.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  ~Bus() override;
  explicit PROTOBUF_CONSTEXPR Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Bus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_base.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Bus_ROUTE_TYPE ROUTE_TYPE;
  static constexpr ROUTE_TYPE LINEAR =
    Bus_ROUTE_TYPE_LINEAR;
  static constexpr ROUTE_TYPE CIRCLE =
    Bus_ROUTE_TYPE_CIRCLE;
  static inline bool ROUTE_TYPE_IsValid(int value) {
    return Bus_ROUTE_TYPE_IsValid(value);
  }
  static constexpr ROUTE_TYPE ROUTE_TYPE_MIN =
    Bus_ROUTE_TYPE_ROUTE_TYPE_MIN;
  static constexpr ROUTE_TYPE ROUTE_TYPE_MAX =
    Bus_ROUTE_TYPE_ROUTE_TYPE_MAX;
  static constexpr int ROUTE_TYPE_ARRAYSIZE =
    Bus_ROUTE_TYPE_ROUTE_TYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ROUTE_TYPE_descriptor() {
    return Bus_ROUTE_TYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& ROUTE_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ROUTE_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ROUTE_TYPE_Name.");
    return Bus_ROUTE_TYPE_Name(enum_t_value);
  }
  static inline bool ROUTE_TYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ROUTE_TYPE* value) {
    return Bus_ROUTE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 4,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kRouteTypeFieldNumber = 3,
  };
  // repeated uint32 route = 4;
  int route_size() const;
  private:
  int _internal_route_size() const;
  public:
  void clear_route();
  private:
  uint32_t _internal_route(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_route() const;
  void _internal_add_route(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_route();
  public:
  uint32_t route(int index) const;
  void set_route(int index, uint32_t value);
  void add_route(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      route() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_route();

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // .transport_base.Bus.ROUTE_TYPE route_type = 3;
  void clear_route_type();
  ::transport_base::Bus_ROUTE_TYPE route_type() const;
  void set_route_type(::transport_base::Bus_ROUTE_TYPE value);
  private:
  ::transport_base::Bus_ROUTE_TYPE _internal_route_type() const;
  void _internal_set_route_type(::transport_base::Bus_ROUTE_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:transport_base.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > route_;
  mutable std::atomic<int> _route_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t id_;
  int route_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Coordinates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_base.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {}
  ~Coordinates() override;
  explicit PROTOBUF_CONSTEXPR Coordinates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coordinates& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coordinates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Coordinates& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_base.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_base.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_;
  double longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop_DistanceToOtherStopsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Stop_DistanceToOtherStopsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Stop_DistanceToOtherStopsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  Stop_DistanceToOtherStopsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Stop_DistanceToOtherStopsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Stop_DistanceToOtherStopsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Stop_DistanceToOtherStopsEntry_DoNotUse& other);
  static const Stop_DistanceToOtherStopsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Stop_DistanceToOtherStopsEntry_DoNotUse*>(&_Stop_DistanceToOtherStopsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};

// -------------------------------------------------------------------

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_base.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit PROTOBUF_CONSTEXPR Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Stop& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_base.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDistanceToOtherStopsFieldNumber = 4,
    kNameFieldNumber = 2,
    kCoordinatesFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // map<uint32, uint32> distance_to_other_stops = 4;
  int distance_to_other_stops_size() const;
  private:
  int _internal_distance_to_other_stops_size() const;
  public:
  void clear_distance_to_other_stops();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_distance_to_other_stops() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_distance_to_other_stops();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      distance_to_other_stops() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_distance_to_other_stops();

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .transport_base.Coordinates coordinates = 3;
  bool has_coordinates() const;
  private:
  bool _internal_has_coordinates() const;
  public:
  void clear_coordinates();
  const ::transport_base::Coordinates& coordinates() const;
  PROTOBUF_NODISCARD ::transport_base::Coordinates* release_coordinates();
  ::transport_base::Coordinates* mutable_coordinates();
  void set_allocated_coordinates(::transport_base::Coordinates* coordinates);
  private:
  const ::transport_base::Coordinates& _internal_coordinates() const;
  ::transport_base::Coordinates* _internal_mutable_coordinates();
  public:
  void unsafe_arena_set_allocated_coordinates(
      ::transport_base::Coordinates* coordinates);
  ::transport_base::Coordinates* unsafe_arena_release_coordinates();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:transport_base.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Stop_DistanceToOtherStopsEntry_DoNotUse,
      uint32_t, uint32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> distance_to_other_stops_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::transport_base::Coordinates* coordinates_;
  uint32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_base.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit PROTOBUF_CONSTEXPR TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransportCatalogue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_base.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusesFieldNumber = 1,
    kStopsFieldNumber = 2,
    kMrSettingsFieldNumber = 3,
    kTransportRouterFieldNumber = 4,
  };
  // repeated .transport_base.Bus buses = 1;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::transport_base::Bus* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_base::Bus >*
      mutable_buses();
  private:
  const ::transport_base::Bus& _internal_buses(int index) const;
  ::transport_base::Bus* _internal_add_buses();
  public:
  const ::transport_base::Bus& buses(int index) const;
  ::transport_base::Bus* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_base::Bus >&
      buses() const;

  // repeated .transport_base.Stop stops = 2;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::transport_base::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_base::Stop >*
      mutable_stops();
  private:
  const ::transport_base::Stop& _internal_stops(int index) const;
  ::transport_base::Stop* _internal_add_stops();
  public:
  const ::transport_base::Stop& stops(int index) const;
  ::transport_base::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_base::Stop >&
      stops() const;

  // .map_renderer_base.MapRendererSettings mr_settings = 3;
  bool has_mr_settings() const;
  private:
  bool _internal_has_mr_settings() const;
  public:
  void clear_mr_settings();
  const ::map_renderer_base::MapRendererSettings& mr_settings() const;
  PROTOBUF_NODISCARD ::map_renderer_base::MapRendererSettings* release_mr_settings();
  ::map_renderer_base::MapRendererSettings* mutable_mr_settings();
  void set_allocated_mr_settings(::map_renderer_base::MapRendererSettings* mr_settings);
  private:
  const ::map_renderer_base::MapRendererSettings& _internal_mr_settings() const;
  ::map_renderer_base::MapRendererSettings* _internal_mutable_mr_settings();
  public:
  void unsafe_arena_set_allocated_mr_settings(
      ::map_renderer_base::MapRendererSettings* mr_settings);
  ::map_renderer_base::MapRendererSettings* unsafe_arena_release_mr_settings();

  // .transport_router_base.TransportRouter transport_router = 4;
  bool has_transport_router() const;
  private:
  bool _internal_has_transport_router() const;
  public:
  void clear_transport_router();
  const ::transport_router_base::TransportRouter& transport_router() const;
  PROTOBUF_NODISCARD ::transport_router_base::TransportRouter* release_transport_router();
  ::transport_router_base::TransportRouter* mutable_transport_router();
  void set_allocated_transport_router(::transport_router_base::TransportRouter* transport_router);
  private:
  const ::transport_router_base::TransportRouter& _internal_transport_router() const;
  ::transport_router_base::TransportRouter* _internal_mutable_transport_router();
  public:
  void unsafe_arena_set_allocated_transport_router(
      ::transport_router_base::TransportRouter* transport_router);
  ::transport_router_base::TransportRouter* unsafe_arena_release_transport_router();

  // @@protoc_insertion_point(class_scope:transport_base.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_base::Bus > buses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_base::Stop > stops_;
  ::map_renderer_base::MapRendererSettings* mr_settings_;
  ::transport_router_base::TransportRouter* transport_router_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Bus

// uint32 id = 1;
inline void Bus::clear_id() {
  id_ = 0u;
}
inline uint32_t Bus::_internal_id() const {
  return id_;
}
inline uint32_t Bus::id() const {
  // @@protoc_insertion_point(field_get:transport_base.Bus.id)
  return _internal_id();
}
inline void Bus::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void Bus::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:transport_base.Bus.id)
}

// string name = 2;
inline void Bus::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Bus::name() const {
  // @@protoc_insertion_point(field_get:transport_base.Bus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_base.Bus.name)
}
inline std::string* Bus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:transport_base.Bus.name)
  return _s;
}
inline const std::string& Bus::_internal_name() const {
  return name_.Get();
}
inline void Bus::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* Bus::release_name() {
  // @@protoc_insertion_point(field_release:transport_base.Bus.name)
  return name_.Release();
}
inline void Bus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transport_base.Bus.name)
}

// .transport_base.Bus.ROUTE_TYPE route_type = 3;
inline void Bus::clear_route_type() {
  route_type_ = 0;
}
inline ::transport_base::Bus_ROUTE_TYPE Bus::_internal_route_type() const {
  return static_cast< ::transport_base::Bus_ROUTE_TYPE >(route_type_);
}
inline ::transport_base::Bus_ROUTE_TYPE Bus::route_type() const {
  // @@protoc_insertion_point(field_get:transport_base.Bus.route_type)
  return _internal_route_type();
}
inline void Bus::_internal_set_route_type(::transport_base::Bus_ROUTE_TYPE value) {
  
  route_type_ = value;
}
inline void Bus::set_route_type(::transport_base::Bus_ROUTE_TYPE value) {
  _internal_set_route_type(value);
  // @@protoc_insertion_point(field_set:transport_base.Bus.route_type)
}

// repeated uint32 route = 4;
inline int Bus::_internal_route_size() const {
  return route_.size();
}
inline int Bus::route_size() const {
  return _internal_route_size();
}
inline void Bus::clear_route() {
  route_.Clear();
}
inline uint32_t Bus::_internal_route(int index) const {
  return route_.Get(index);
}
inline uint32_t Bus::route(int index) const {
  // @@protoc_insertion_point(field_get:transport_base.Bus.route)
  return _internal_route(index);
}
inline void Bus::set_route(int index, uint32_t value) {
  route_.Set(index, value);
  // @@protoc_insertion_point(field_set:transport_base.Bus.route)
}
inline void Bus::_internal_add_route(uint32_t value) {
  route_.Add(value);
}
inline void Bus::add_route(uint32_t value) {
  _internal_add_route(value);
  // @@protoc_insertion_point(field_add:transport_base.Bus.route)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bus::_internal_route() const {
  return route_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bus::route() const {
  // @@protoc_insertion_point(field_list:transport_base.Bus.route)
  return _internal_route();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bus::_internal_mutable_route() {
  return &route_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bus::mutable_route() {
  // @@protoc_insertion_point(field_mutable_list:transport_base.Bus.route)
  return _internal_mutable_route();
}

// -------------------------------------------------------------------

// Coordinates

// double latitude = 1;
inline void Coordinates::clear_latitude() {
  latitude_ = 0;
}
inline double Coordinates::_internal_latitude() const {
  return latitude_;
}
inline double Coordinates::latitude() const {
  // @@protoc_insertion_point(field_get:transport_base.Coordinates.latitude)
  return _internal_latitude();
}
inline void Coordinates::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void Coordinates::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:transport_base.Coordinates.latitude)
}

// double longitude = 2;
inline void Coordinates::clear_longitude() {
  longitude_ = 0;
}
inline double Coordinates::_internal_longitude() const {
  return longitude_;
}
inline double Coordinates::longitude() const {
  // @@protoc_insertion_point(field_get:transport_base.Coordinates.longitude)
  return _internal_longitude();
}
inline void Coordinates::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void Coordinates::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:transport_base.Coordinates.longitude)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Stop

// uint32 id = 1;
inline void Stop::clear_id() {
  id_ = 0u;
}
inline uint32_t Stop::_internal_id() const {
  return id_;
}
inline uint32_t Stop::id() const {
  // @@protoc_insertion_point(field_get:transport_base.Stop.id)
  return _internal_id();
}
inline void Stop::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void Stop::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:transport_base.Stop.id)
}

// string name = 2;
inline void Stop::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:transport_base.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_base.Stop.name)
}
inline std::string* Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:transport_base.Stop.name)
  return _s;
}
inline const std::string& Stop::_internal_name() const {
  return name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:transport_base.Stop.name)
  return name_.Release();
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transport_base.Stop.name)
}

// .transport_base.Coordinates coordinates = 3;
inline bool Stop::_internal_has_coordinates() const {
  return this != internal_default_instance() && coordinates_ != nullptr;
}
inline bool Stop::has_coordinates() const {
  return _internal_has_coordinates();
}
inline void Stop::clear_coordinates() {
  if (GetArenaForAllocation() == nullptr && coordinates_ != nullptr) {
    delete coordinates_;
  }
  coordinates_ = nullptr;
}
inline const ::transport_base::Coordinates& Stop::_internal_coordinates() const {
  const ::transport_base::Coordinates* p = coordinates_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_base::Coordinates&>(
      ::transport_base::_Coordinates_default_instance_);
}
inline const ::transport_base::Coordinates& Stop::coordinates() const {
  // @@protoc_insertion_point(field_get:transport_base.Stop.coordinates)
  return _internal_coordinates();
}
inline void Stop::unsafe_arena_set_allocated_coordinates(
    ::transport_base::Coordinates* coordinates) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinates_);
  }
  coordinates_ = coordinates;
  if (coordinates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_base.Stop.coordinates)
}
inline ::transport_base::Coordinates* Stop::release_coordinates() {
  
  ::transport_base::Coordinates* temp = coordinates_;
  coordinates_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_base::Coordinates* Stop::unsafe_arena_release_coordinates() {
  // @@protoc_insertion_point(field_release:transport_base.Stop.coordinates)
  
  ::transport_base::Coordinates* temp = coordinates_;
  coordinates_ = nullptr;
  return temp;
}
inline ::transport_base::Coordinates* Stop::_internal_mutable_coordinates() {
  
  if (coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_base::Coordinates>(GetArenaForAllocation());
    coordinates_ = p;
  }
  return coordinates_;
}
inline ::transport_base::Coordinates* Stop::mutable_coordinates() {
  ::transport_base::Coordinates* _msg = _internal_mutable_coordinates();
  // @@protoc_insertion_point(field_mutable:transport_base.Stop.coordinates)
  return _msg;
}
inline void Stop::set_allocated_coordinates(::transport_base::Coordinates* coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete coordinates_;
  }
  if (coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coordinates);
    if (message_arena != submessage_arena) {
      coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinates, submessage_arena);
    }
    
  } else {
    
  }
  coordinates_ = coordinates;
  // @@protoc_insertion_point(field_set_allocated:transport_base.Stop.coordinates)
}

// map<uint32, uint32> distance_to_other_stops = 4;
inline int Stop::_internal_distance_to_other_stops_size() const {
  return distance_to_other_stops_.size();
}
inline int Stop::distance_to_other_stops_size() const {
  return _internal_distance_to_other_stops_size();
}
inline void Stop::clear_distance_to_other_stops() {
  distance_to_other_stops_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
Stop::_internal_distance_to_other_stops() const {
  return distance_to_other_stops_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
Stop::distance_to_other_stops() const {
  // @@protoc_insertion_point(field_map:transport_base.Stop.distance_to_other_stops)
  return _internal_distance_to_other_stops();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
Stop::_internal_mutable_distance_to_other_stops() {
  return distance_to_other_stops_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
Stop::mutable_distance_to_other_stops() {
  // @@protoc_insertion_point(field_mutable_map:transport_base.Stop.distance_to_other_stops)
  return _internal_mutable_distance_to_other_stops();
}

// -------------------------------------------------------------------

// TransportCatalogue

// repeated .transport_base.Bus buses = 1;
inline int TransportCatalogue::_internal_buses_size() const {
  return buses_.size();
}
inline int TransportCatalogue::buses_size() const {
  return _internal_buses_size();
}
inline void TransportCatalogue::clear_buses() {
  buses_.Clear();
}
inline ::transport_base::Bus* TransportCatalogue::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:transport_base.TransportCatalogue.buses)
  return buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_base::Bus >*
TransportCatalogue::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:transport_base.TransportCatalogue.buses)
  return &buses_;
}
inline const ::transport_base::Bus& TransportCatalogue::_internal_buses(int index) const {
  return buses_.Get(index);
}
inline const ::transport_base::Bus& TransportCatalogue::buses(int index) const {
  // @@protoc_insertion_point(field_get:transport_base.TransportCatalogue.buses)
  return _internal_buses(index);
}
inline ::transport_base::Bus* TransportCatalogue::_internal_add_buses() {
  return buses_.Add();
}
inline ::transport_base::Bus* TransportCatalogue::add_buses() {
  ::transport_base::Bus* _add = _internal_add_buses();
  // @@protoc_insertion_point(field_add:transport_base.TransportCatalogue.buses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_base::Bus >&
TransportCatalogue::buses() const {
  // @@protoc_insertion_point(field_list:transport_base.TransportCatalogue.buses)
  return buses_;
}

// repeated .transport_base.Stop stops = 2;
inline int TransportCatalogue::_internal_stops_size() const {
  return stops_.size();
}
inline int TransportCatalogue::stops_size() const {
  return _internal_stops_size();
}
inline void TransportCatalogue::clear_stops() {
  stops_.Clear();
}
inline ::transport_base::Stop* TransportCatalogue::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:transport_base.TransportCatalogue.stops)
  return stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_base::Stop >*
TransportCatalogue::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:transport_base.TransportCatalogue.stops)
  return &stops_;
}
inline const ::transport_base::Stop& TransportCatalogue::_internal_stops(int index) const {
  return stops_.Get(index);
}
inline const ::transport_base::Stop& TransportCatalogue::stops(int index) const {
  // @@protoc_insertion_point(field_get:transport_base.TransportCatalogue.stops)
  return _internal_stops(index);
}
inline ::transport_base::Stop* TransportCatalogue::_internal_add_stops() {
  return stops_.Add();
}
inline ::transport_base::Stop* TransportCatalogue::add_stops() {
  ::transport_base::Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:transport_base.TransportCatalogue.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_base::Stop >&
TransportCatalogue::stops() const {
  // @@protoc_insertion_point(field_list:transport_base.TransportCatalogue.stops)
  return stops_;
}

// .map_renderer_base.MapRendererSettings mr_settings = 3;
inline bool TransportCatalogue::_internal_has_mr_settings() const {
  return this != internal_default_instance() && mr_settings_ != nullptr;
}
inline bool TransportCatalogue::has_mr_settings() const {
  return _internal_has_mr_settings();
}
inline const ::map_renderer_base::MapRendererSettings& TransportCatalogue::_internal_mr_settings() const {
  const ::map_renderer_base::MapRendererSettings* p = mr_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::map_renderer_base::MapRendererSettings&>(
      ::map_renderer_base::_MapRendererSettings_default_instance_);
}
inline const ::map_renderer_base::MapRendererSettings& TransportCatalogue::mr_settings() const {
  // @@protoc_insertion_point(field_get:transport_base.TransportCatalogue.mr_settings)
  return _internal_mr_settings();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_mr_settings(
    ::map_renderer_base::MapRendererSettings* mr_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mr_settings_);
  }
  mr_settings_ = mr_settings;
  if (mr_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_base.TransportCatalogue.mr_settings)
}
inline ::map_renderer_base::MapRendererSettings* TransportCatalogue::release_mr_settings() {
  
  ::map_renderer_base::MapRendererSettings* temp = mr_settings_;
  mr_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::map_renderer_base::MapRendererSettings* TransportCatalogue::unsafe_arena_release_mr_settings() {
  // @@protoc_insertion_point(field_release:transport_base.TransportCatalogue.mr_settings)
  
  ::map_renderer_base::MapRendererSettings* temp = mr_settings_;
  mr_settings_ = nullptr;
  return temp;
}
inline ::map_renderer_base::MapRendererSettings* TransportCatalogue::_internal_mutable_mr_settings() {
  
  if (mr_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::map_renderer_base::MapRendererSettings>(GetArenaForAllocation());
    mr_settings_ = p;
  }
  return mr_settings_;
}
inline ::map_renderer_base::MapRendererSettings* TransportCatalogue::mutable_mr_settings() {
  ::map_renderer_base::MapRendererSettings* _msg = _internal_mutable_mr_settings();
  // @@protoc_insertion_point(field_mutable:transport_base.TransportCatalogue.mr_settings)
  return _msg;
}
inline void TransportCatalogue::set_allocated_mr_settings(::map_renderer_base::MapRendererSettings* mr_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mr_settings_);
  }
  if (mr_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mr_settings));
    if (message_arena != submessage_arena) {
      mr_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mr_settings, submessage_arena);
    }
    
  } else {
    
  }
  mr_settings_ = mr_settings;
  // @@protoc_insertion_point(field_set_allocated:transport_base.TransportCatalogue.mr_settings)
}

// .transport_router_base.TransportRouter transport_router = 4;
inline bool TransportCatalogue::_internal_has_transport_router() const {
  return this != internal_default_instance() && transport_router_ != nullptr;
}
inline bool TransportCatalogue::has_transport_router() const {
  return _internal_has_transport_router();
}
inline const ::transport_router_base::TransportRouter& TransportCatalogue::_internal_transport_router() const {
  const ::transport_router_base::TransportRouter* p = transport_router_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_router_base::TransportRouter&>(
      ::transport_router_base::_TransportRouter_default_instance_);
}
inline const ::transport_router_base::TransportRouter& TransportCatalogue::transport_router() const {
  // @@protoc_insertion_point(field_get:transport_base.TransportCatalogue.transport_router)
  return _internal_transport_router();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_transport_router(
    ::transport_router_base::TransportRouter* transport_router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_router_);
  }
  transport_router_ = transport_router;
  if (transport_router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_base.TransportCatalogue.transport_router)
}
inline ::transport_router_base::TransportRouter* TransportCatalogue::release_transport_router() {
  
  ::transport_router_base::TransportRouter* temp = transport_router_;
  transport_router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_router_base::TransportRouter* TransportCatalogue::unsafe_arena_release_transport_router() {
  // @@protoc_insertion_point(field_release:transport_base.TransportCatalogue.transport_router)
  
  ::transport_router_base::TransportRouter* temp = transport_router_;
  transport_router_ = nullptr;
  return temp;
}
inline ::transport_router_base::TransportRouter* TransportCatalogue::_internal_mutable_transport_router() {
  
  if (transport_router_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_router_base::TransportRouter>(GetArenaForAllocation());
    transport_router_ = p;
  }
  return transport_router_;
}
inline ::transport_router_base::TransportRouter* TransportCatalogue::mutable_transport_router() {
  ::transport_router_base::TransportRouter* _msg = _internal_mutable_transport_router();
  // @@protoc_insertion_point(field_mutable:transport_base.TransportCatalogue.transport_router)
  return _msg;
}
inline void TransportCatalogue::set_allocated_transport_router(::transport_router_base::TransportRouter* transport_router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_router_);
  }
  if (transport_router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_router));
    if (message_arena != submessage_arena) {
      transport_router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport_router, submessage_arena);
    }
    
  } else {
    
  }
  transport_router_ = transport_router;
  // @@protoc_insertion_point(field_set_allocated:transport_base.TransportCatalogue.transport_router)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transport_base

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::transport_base::Bus_ROUTE_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::transport_base::Bus_ROUTE_TYPE>() {
  return ::transport_base::Bus_ROUTE_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
